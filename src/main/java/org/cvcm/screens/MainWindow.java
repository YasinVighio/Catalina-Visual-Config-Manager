/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package org.cvcm.screens;

import org.cvcm.configurer.ConfigService;
import org.cvcm.dto.ConfigurationDTO;
import org.cvcm.dto.ServiceResponse;
import org.cvcm.utils.StringUtils;

import javax.swing.*;
import java.util.Map;

/**
 *
 * @author Yasin
 */

public class MainWindow extends JFrame {

    private ConfigService configServiceClient;

    public MainWindow(ConfigService configService){
        this.configServiceClient = configService;
        this.initComponents();
    }

    /**
     * Creates new form MainWindow
     */
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        connectionTimeOutLbl = new javax.swing.JLabel();
        catalinaHomeLabel = new javax.swing.JLabel();
        connectorPortInput = new javax.swing.JTextField();
        connectorPortLbl1 = new javax.swing.JLabel();
        connectionTimeOutInput = new javax.swing.JTextField();
        accessLogPtrnLbl = new javax.swing.JLabel();
        accessLogPtrnInput = new javax.swing.JTextField();
        saveBtn = new javax.swing.JButton();
        catalinaInstallDirs = new javax.swing.JComboBox<>();
        loadConfigsBtn = new javax.swing.JButton();
        loadInstallDirsBtn = new javax.swing.JButton();
        loadCachedBtn = new javax.swing.JButton();
        runSelectTomcatBtn = new javax.swing.JButton();
        setSelectTcAsCatHome = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        messageLbl = new javax.swing.JLabel();
        debugModeChkBox = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        jpdaPortInput = new javax.swing.JTextField();
        restoreBkpBtn = new javax.swing.JButton();
        backupBtn = new javax.swing.JButton();
        stopSelectTomcatBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        aliasInput = new javax.swing.JTextField();
        setAliasBtn = new javax.swing.JButton();

        jMenuItem1.setText("jMenuItem1");

        jMenuItem2.setText("jMenuItem2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        connectionTimeOutLbl.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        connectionTimeOutLbl.setText("CONNECTION TIMEOUT");

        catalinaHomeLabel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        catalinaHomeLabel.setText("CATALINA DIRS");

        connectorPortInput.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        connectorPortInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectorPortInputActionPerformed(evt);
            }
        });

        connectorPortLbl1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        connectorPortLbl1.setText("CONNECTOR PORT");

        connectionTimeOutInput.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        connectionTimeOutInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectionTimeOutInputActionPerformed(evt);
            }
        });

        accessLogPtrnLbl.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        accessLogPtrnLbl.setText("ACCESS LOG PATTERN");

        accessLogPtrnInput.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        accessLogPtrnInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accessLogPtrnInputActionPerformed(evt);
            }
        });

        saveBtn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        saveBtn.setText("Save Configs");
        saveBtn.setToolTipText("To use this feature configuation must be loaded first");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });

        catalinaInstallDirs.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        catalinaInstallDirs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                catalinaInstallDirsActionPerformed(evt);
            }
        });

        loadConfigsBtn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        loadConfigsBtn.setText("Load Configs");
        loadConfigsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadConfigsBtnActionPerformed(evt);
            }
        });

        loadInstallDirsBtn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        loadInstallDirsBtn.setText("Load Install Dirs (Fresh)");
        loadInstallDirsBtn.setToolTipText("Load directories by scanning whole system. Use for fresh installation");
        loadInstallDirsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadInstallDirsBtnActionPerformed(evt);
            }
        });

        loadCachedBtn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        loadCachedBtn.setText("Load Cached Install Dirs");
        loadCachedBtn.setToolTipText("Load directories from saved data");
        loadCachedBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadCachedBtnActionPerformed(evt);
            }
        });

        runSelectTomcatBtn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        runSelectTomcatBtn.setText("Run Selected Tomcat");
        runSelectTomcatBtn.setToolTipText("Run selected tomcat, to run multiple tomcat instances connector port must be changed");
        runSelectTomcatBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runSelectTomcatBtnActionPerformed(evt);
            }
        });

        setSelectTcAsCatHome.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        setSelectTcAsCatHome.setText("Set Selected Tomcat as CATALINA_HOME");
        setSelectTcAsCatHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setSelectTcAsCatHomeActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setText("Message:");

        messageLbl.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        messageLbl.setForeground(new java.awt.Color(255, 0, 0));
        messageLbl.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 153), 2));
        jScrollPane1.setViewportView(messageLbl);

        debugModeChkBox.setForeground(new java.awt.Color(255, 0, 0));
        debugModeChkBox.setText("Run Selected In Debug Mode");
        debugModeChkBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                debugModeChkBoxActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setText("JPDA_PORT");

        jpdaPortInput.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        restoreBkpBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        restoreBkpBtn.setText("Restore Backup Configs");
        restoreBkpBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restoreBkpBtnActionPerformed(evt);
            }
        });

        backupBtn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        backupBtn.setText("Backup Configs");
        backupBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backupBtnActionPerformed(evt);
            }
        });

        stopSelectTomcatBtn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        stopSelectTomcatBtn.setText("Stop Selected Tomcat");
        stopSelectTomcatBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopSelectTomcatBtnActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setText("ALIAS");

        aliasInput.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        setAliasBtn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        setAliasBtn.setText("Set Alias");
        setAliasBtn.setToolTipText("Set Alias for Selected Tomcat");
        setAliasBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setAliasBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(loadConfigsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(backupBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(loadCachedBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(runSelectTomcatBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(stopSelectTomcatBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                                        .addComponent(setAliasBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(setSelectTcAsCatHome, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(loadInstallDirsBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(saveBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(restoreBkpBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(accessLogPtrnLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addComponent(connectorPortLbl1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(22, 22, 22)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(catalinaInstallDirs, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(connectionTimeOutInput, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(connectorPortInput, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(accessLogPtrnInput, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(connectionTimeOutLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 370, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(198, 669, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jpdaPortInput, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(aliasInput, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(debugModeChkBox, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(16, 16, 16)
                    .addComponent(catalinaHomeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(831, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(catalinaInstallDirs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(aliasInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(connectorPortInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(connectorPortLbl1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jpdaPortInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(debugModeChkBox)
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(connectionTimeOutLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(connectionTimeOutInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(accessLogPtrnLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(accessLogPtrnInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(loadInstallDirsBtn)
                    .addComponent(loadCachedBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backupBtn)
                    .addComponent(restoreBkpBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loadConfigsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveBtn))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stopSelectTomcatBtn)
                    .addComponent(setAliasBtn)
                    .addComponent(runSelectTomcatBtn)
                    .addComponent(setSelectTcAsCatHome))
                .addGap(25, 25, 25))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(35, 35, 35)
                    .addComponent(catalinaHomeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(528, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectorPortInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectorPortInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_connectorPortInputActionPerformed

    private void connectionTimeOutInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectionTimeOutInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_connectionTimeOutInputActionPerformed

    private void accessLogPtrnInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accessLogPtrnInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_accessLogPtrnInputActionPerformed

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        if(catalinaInstallDirs.getSelectedItem()!=null && configurations != null) {
            String tomcatDir = catalinaInstallDirs.getSelectedItem().toString();
            ConfigurationDTO newConfig = fillConfigDTO();
            ServiceResponse response = configServiceClient.saveChangesInServerXML(tomcatDir, newConfig);
            this.messageLbl.setText(response.getMessage());
        } else {
            this.messageLbl.setText("Error: Tomcat not selected or configs not loaded");
        }
    }//GEN-LAST:event_saveBtnActionPerformed

    private void loadInstallDirsBtnActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        SwingUtilities.invokeLater(() -> {
            messageLbl.setText("Please wait a while. We are scanning file system for Tomcat");
        });

        // Perform the long-running operation asynchronously
        new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                // Long-running operation
                ServiceResponse response = configServiceClient.getTomcatInstallDirs();
                tomcatDirs = response.getDataMap();

                // Update the UI with the results on the EDT
                SwingUtilities.invokeLater(() -> {
                    DefaultComboBoxModel<String> comboBoxModel = new DefaultComboBoxModel<>(tomcatDirs.keySet()
                            .toArray(new String[0]));
                    catalinaInstallDirs.setModel(comboBoxModel);
                    messageLbl.setText(response.getMessage());

                    aliasInput.setText(tomcatDirs.get(catalinaInstallDirs.getSelectedItem()));
                });
                return null;
            }
        }.execute();
    }

    private void loadConfigsBtnActionPerformed(java.awt.event.ActionEvent evt) {
        if(catalinaInstallDirs.getSelectedItem()!=null) {
            ServiceResponse response = configServiceClient.getConfigurations(catalinaInstallDirs.getSelectedItem().toString());
            ConfigurationDTO cfgs = response.getConfiguration();
            if (cfgs != null) {
                this.configurations = cfgs;
                this.accessLogPtrnInput.setText(cfgs.getAccessLogPattern());
                this.connectionTimeOutInput.setText(String.valueOf(cfgs.getConnectionTimeout()));
                this.connectorPortInput.setText(String.valueOf(cfgs.getConnectorPort()));
            }
            this.messageLbl.setText(response.getMessage());
        } else {
            this.messageLbl.setText("Error: Tomcat not selected");
        }
    }                                              

    private void loadCachedBtnActionPerformed(java.awt.event.ActionEvent evt) {
        ServiceResponse response = configServiceClient.getSavedTomcatInstallDirs();
        this.tomcatDirs =  response.getDataMap();
        if(this.tomcatDirs!=null) {
            DefaultComboBoxModel comboBoxModel = new DefaultComboBoxModel<>(this.tomcatDirs.keySet().toArray());
            this.catalinaInstallDirs.setModel(comboBoxModel);
            this.aliasInput.setText(this.tomcatDirs.get(this.catalinaInstallDirs.getSelectedItem()));
        }
        messageLbl.setText(response.getMessage());
    }                                             

    private void runSelectTomcatBtnActionPerformed(java.awt.event.ActionEvent evt) {
        if(catalinaInstallDirs.getSelectedItem()!=null) {
            String tomcatDir = catalinaInstallDirs.getSelectedItem().toString();
            boolean debugMode = this.debugModeChkBox.isSelected();
            String debugPort = jpdaPortInput.getText();
            ServiceResponse response = configServiceClient.runSelectedTomcat(tomcatDir, debugPort, debugMode);
            this.messageLbl.setText(response.getMessage());
        } else {
            this.messageLbl.setText("Error: Tomcat not selected");
        }
    }                                                  

    private void debugModeChkBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_debugModeChkBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_debugModeChkBoxActionPerformed

    private void backupBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backupBtnActionPerformed
        if(catalinaInstallDirs.getSelectedItem()!=null) {
            String tomcatDir = catalinaInstallDirs.getSelectedItem().toString();
            ServiceResponse response = configServiceClient.createBackupOfServerXML(tomcatDir);
            this.messageLbl.setText(response.getMessage());
        } else {
            this.messageLbl.setText("Error: Tomcat not selected");
        }
    }//GEN-LAST:event_backupBtnActionPerformed

    private void stopSelectTomcatBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopSelectTomcatBtnActionPerformed
        if(catalinaInstallDirs.getSelectedItem()!=null) {
            String tomcatDir = catalinaInstallDirs.getSelectedItem().toString();
            ServiceResponse response = configServiceClient.stopSelectedTomcat(tomcatDir);
            this.messageLbl.setText(response.getMessage());
        } else {
            this.messageLbl.setText("Error: Tomcat not selected");
        }
    }//GEN-LAST:event_stopSelectTomcatBtnActionPerformed

    private void restoreBkpBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restoreBkpBtnActionPerformed
        if(catalinaInstallDirs.getSelectedItem()!=null) {
            String tomcatDir = catalinaInstallDirs.getSelectedItem().toString();
            ServiceResponse response = configServiceClient.restoreBackupOfServerXML(tomcatDir);
            this.messageLbl.setText(response.getMessage());
        } else {
            this.messageLbl.setText("Error: Tomcat not selected");
        }
    }//GEN-LAST:event_restoreBkpBtnActionPerformed

    private void setAliasBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setAliasBtnActionPerformed

        if(catalinaInstallDirs.getSelectedItem()!=null) {
            String alias = this.aliasInput.getText();
            String selectedTomcat = catalinaInstallDirs.getSelectedItem().toString();
            //if valid and not same alias
            if (StringUtils.isStringValid(alias) && !tomcatDirs.get(selectedTomcat).equals(alias)) {
                tomcatDirs.put(selectedTomcat, alias); //update map
                ServiceResponse response = configServiceClient.updateAlias(selectedTomcat, alias); //update cached
                this.messageLbl.setText(response.getMessage());
            } else {
                this.messageLbl.setText("Alias not valid");
            }
        } else {
            this.messageLbl.setText("Error: Tomcat not selected");
        }
    }//GEN-LAST:event_setAliasBtnActionPerformed

    private void catalinaInstallDirsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_catalinaInstallDirsActionPerformed
        aliasInput.setText(tomcatDirs.get(catalinaInstallDirs.getSelectedItem()));
    }//GEN-LAST:event_catalinaInstallDirsActionPerformed

    private void setSelectTcAsCatHomeActionPerformed(java.awt.event.ActionEvent evt) {
        if(catalinaInstallDirs.getSelectedItem()!=null) {
            ServiceResponse response = configServiceClient.setCatalinaHome(catalinaInstallDirs.getSelectedItem().toString());
            messageLbl.setText(response.getMessage());
        } else{
            this.messageLbl.setText("Error: Tomcat not selected");
        }
    }

    private ConfigurationDTO fillConfigDTO(){
        //only if anything is changed and valid string
        ConfigurationDTO configs = new ConfigurationDTO();
        if(StringUtils.isStringValid(this.connectorPortInput.getText())
                && !configurations.getConnectorPort().equals(Integer.valueOf(this.connectorPortInput.getText()))){
            configs.setConnectorPort(Integer.valueOf(this.connectorPortInput.getText()));
        }
        if(StringUtils.isStringValid(this.connectionTimeOutInput.getText())
                && !configurations.getConnectionTimeout().equals(Integer.valueOf(this.connectionTimeOutInput.getText()))){
            configs.setConnectionTimeout(Integer.valueOf(this.connectionTimeOutInput.getText()));
        }
        if(StringUtils.isStringValid(this.accessLogPtrnInput.getText())
                && !configurations.getAccessLogPattern().equals(this.accessLogPtrnInput.getText())){
            configs.setAccessLogPattern(this.accessLogPtrnInput.getText());
        }
        return configs;
    }

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField accessLogPtrnInput;
    private javax.swing.JLabel accessLogPtrnLbl;
    private javax.swing.JTextField aliasInput;
    private javax.swing.JButton backupBtn;
    private javax.swing.JLabel catalinaHomeLabel;
    private javax.swing.JComboBox<String> catalinaInstallDirs;
    private javax.swing.JTextField connectionTimeOutInput;
    private javax.swing.JLabel connectionTimeOutLbl;
    private javax.swing.JTextField connectorPortInput;
    private javax.swing.JLabel connectorPortLbl1;
    private javax.swing.JCheckBox debugModeChkBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jpdaPortInput;
    private javax.swing.JButton loadCachedBtn;
    private javax.swing.JButton loadConfigsBtn;
    private javax.swing.JButton loadInstallDirsBtn;
    private javax.swing.JLabel messageLbl;
    private javax.swing.JButton restoreBkpBtn;
    private javax.swing.JButton runSelectTomcatBtn;
    private javax.swing.JButton saveBtn;
    private javax.swing.JButton setAliasBtn;
    private javax.swing.JButton setSelectTcAsCatHome;
    private javax.swing.JButton stopSelectTomcatBtn;

    private ConfigurationDTO configurations = null;
    private Map<String, String> tomcatDirs = null;
    // End of variables declaration//GEN-END:variables
}
